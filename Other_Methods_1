import pandas as pd
import numpy as np
import matplotlib.pyplot as plt


#Importing data
df = pd.read_csv('C:/Users/Administrator/Desktop/JPS_Response/LSTM-data.csv')
cycle=df['Cycle'][:,np.newaxis]
temperature=df['Temperature'][:,np.newaxis]

split_data=int(len(df)*0.8)  #test 0.8, valid 0.2 #8020 58867   int(len(data)*0.8)

X_train=cycle[0:split_data]
y_train=temperature[0:split_data]
X_test = cycle[split_data:]
y_test = temperature[split_data:]


###########3.具体方法选择##########
####3.1决策树回归####
from sklearn import tree
model_DecisionTreeRegressor = tree.DecisionTreeRegressor()
####3.2线性回归####
from sklearn import linear_model
model_LinearRegression = linear_model.LinearRegression()
####3.3SVM回归####
from sklearn import svm
model_SVR = svm.SVR()
####3.4KNN回归####
from sklearn import neighbors
model_KNeighborsRegressor = neighbors.KNeighborsRegressor()
####3.5随机森林回归####
from sklearn import ensemble
model_RandomForestRegressor = ensemble.RandomForestRegressor(n_estimators=20)#这里使用20个决策树
####3.6Adaboost回归####
from sklearn import ensemble
model_AdaBoostRegressor = ensemble.AdaBoostRegressor(n_estimators=50)#这里使用50个决策树
####3.7GBRT回归####
from sklearn import ensemble
model_GradientBoostingRegressor = ensemble.GradientBoostingRegressor(n_estimators=100)#这里使用100个决策树
####3.8Bagging回归####
from sklearn.ensemble import BaggingRegressor
model_BaggingRegressor = BaggingRegressor()
####3.9ExtraTree极端随机树回归####
from sklearn.tree import ExtraTreeRegressor
model_ExtraTreeRegressor = ExtraTreeRegressor()
###########4.具体方法调用部分##########
###########2.回归部分##########
def try_different_method(model):
  model.fit(X_train,y_train)
  score = model.score(X_test, y_test)
  result = model.predict(X_test)
  fig=plt.figure(num=1,figsize=(20,4.5))
  # #坐标轴上限范围
  plt.ylim(34, 42)
  plt.xlim(-10,1200)
  #边框粗细
  ax=plt.gca()
  bwith = 6 #all4 part6
  ax.spines['bottom'].set_linewidth(bwith)
  ax.spines['left'].set_linewidth(bwith)
  ax.spines['top'].set_linewidth(bwith)
  ax.spines['right'].set_linewidth(bwith)
  #调边框
  plt.subplots_adjust(left=0.2, right=0.9, top=0.95, bottom=0.15)
  #刻度
  # tick_params() #刻度线粗细
  plt.tick_params(labelsize=40,which='major',width=5,length=7) #刻度大小 #all24,4,6,,,,part40,5,7
  # ax.xaxis.set_major_locator(ticker.MultipleLocator(4))  #X轴刻度密度
  #横纵坐标轴
  plt.xlabel('Cycle',fontsize=45)    #设置x轴标题 all35,part45
  plt.ylabel('Temp ($^\circ$C)',fontsize=45)   #设置Y1轴标题all35,part45
  # plt.figure()
  # plt.plot(np.arange(len(result)), y_test,'go-',label='true value')
  # plt.plot(np.arange(len(result)),result,'ro-',label='predict value')
  # plt.title('score: %f'%score)
  # plt.legend()
  plt.plot(X_train, y_train,lw=6, label='Train')
  plt.plot(X_test,y_test, lw=6,label='Test')
  plt.plot(X_test,result,lw=6)
  plt.show()

# try_different_method(model_DecisionTreeRegressor)
# try_different_method(model_LinearRegression)
# try_different_method(model_SVR)
# try_different_method(model_RandomForestRegressor)
try_different_method(model_AdaBoostRegressor)
try_different_method(model_GradientBoostingRegressor)
try_different_method(model_BaggingRegressor)
try_different_method(model_ExtraTreeRegressor)
